/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as CommonLayoutRouteImport } from './routes/_commonLayout'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as CommonLayoutIndexRouteImport } from './routes/_commonLayout/index'
import { Route as CommonLayoutTestRouteImport } from './routes/_commonLayout/test'
import { Route as AuthedPostsRouteImport } from './routes/_authed/posts'
import { Route as AuthedPostsIndexRouteImport } from './routes/_authed/posts.index'
import { Route as AuthedPostsPostIdRouteImport } from './routes/_authed/posts.$postId'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const CommonLayoutRoute = CommonLayoutRouteImport.update({
  id: '/_commonLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const CommonLayoutIndexRoute = CommonLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CommonLayoutRoute,
} as any)
const CommonLayoutTestRoute = CommonLayoutTestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => CommonLayoutRoute,
} as any)
const AuthedPostsRoute = AuthedPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedPostsIndexRoute = AuthedPostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedPostsRoute,
} as any)
const AuthedPostsPostIdRoute = AuthedPostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => AuthedPostsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/posts': typeof AuthedPostsRouteWithChildren
  '/test': typeof CommonLayoutTestRoute
  '/': typeof CommonLayoutIndexRoute
  '/posts/$postId': typeof AuthedPostsPostIdRoute
  '/posts/': typeof AuthedPostsIndexRoute
}
export interface FileRoutesByTo {
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/test': typeof CommonLayoutTestRoute
  '/': typeof CommonLayoutIndexRoute
  '/posts/$postId': typeof AuthedPostsPostIdRoute
  '/posts': typeof AuthedPostsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteWithChildren
  '/_commonLayout': typeof CommonLayoutRouteWithChildren
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/_authed/posts': typeof AuthedPostsRouteWithChildren
  '/_commonLayout/test': typeof CommonLayoutTestRoute
  '/_commonLayout/': typeof CommonLayoutIndexRoute
  '/_authed/posts/$postId': typeof AuthedPostsPostIdRoute
  '/_authed/posts/': typeof AuthedPostsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/forgot-password'
    | '/login'
    | '/logout'
    | '/signup'
    | '/posts'
    | '/test'
    | '/'
    | '/posts/$postId'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/forgot-password'
    | '/login'
    | '/logout'
    | '/signup'
    | '/test'
    | '/'
    | '/posts/$postId'
    | '/posts'
  id:
    | '__root__'
    | '/_authed'
    | '/_commonLayout'
    | '/forgot-password'
    | '/login'
    | '/logout'
    | '/signup'
    | '/_authed/posts'
    | '/_commonLayout/test'
    | '/_commonLayout/'
    | '/_authed/posts/$postId'
    | '/_authed/posts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  CommonLayoutRoute: typeof CommonLayoutRouteWithChildren
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_commonLayout': {
      id: '/_commonLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof CommonLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_commonLayout/': {
      id: '/_commonLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof CommonLayoutIndexRouteImport
      parentRoute: typeof CommonLayoutRoute
    }
    '/_commonLayout/test': {
      id: '/_commonLayout/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof CommonLayoutTestRouteImport
      parentRoute: typeof CommonLayoutRoute
    }
    '/_authed/posts': {
      id: '/_authed/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof AuthedPostsRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/posts/': {
      id: '/_authed/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof AuthedPostsIndexRouteImport
      parentRoute: typeof AuthedPostsRoute
    }
    '/_authed/posts/$postId': {
      id: '/_authed/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof AuthedPostsPostIdRouteImport
      parentRoute: typeof AuthedPostsRoute
    }
  }
}

interface AuthedPostsRouteChildren {
  AuthedPostsPostIdRoute: typeof AuthedPostsPostIdRoute
  AuthedPostsIndexRoute: typeof AuthedPostsIndexRoute
}

const AuthedPostsRouteChildren: AuthedPostsRouteChildren = {
  AuthedPostsPostIdRoute: AuthedPostsPostIdRoute,
  AuthedPostsIndexRoute: AuthedPostsIndexRoute,
}

const AuthedPostsRouteWithChildren = AuthedPostsRoute._addFileChildren(
  AuthedPostsRouteChildren,
)

interface AuthedRouteChildren {
  AuthedPostsRoute: typeof AuthedPostsRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedPostsRoute: AuthedPostsRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

interface CommonLayoutRouteChildren {
  CommonLayoutTestRoute: typeof CommonLayoutTestRoute
  CommonLayoutIndexRoute: typeof CommonLayoutIndexRoute
}

const CommonLayoutRouteChildren: CommonLayoutRouteChildren = {
  CommonLayoutTestRoute: CommonLayoutTestRoute,
  CommonLayoutIndexRoute: CommonLayoutIndexRoute,
}

const CommonLayoutRouteWithChildren = CommonLayoutRoute._addFileChildren(
  CommonLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  CommonLayoutRoute: CommonLayoutRouteWithChildren,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
