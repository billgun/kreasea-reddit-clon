/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as CommonLayoutRouteImport } from './routes/_commonLayout'
import { Route as CommonLayoutIndexRouteImport } from './routes/_commonLayout/index'
import { Route as CommonLayoutTestRouteImport } from './routes/_commonLayout/test'
import { Route as CommonLayoutAuthedRouteImport } from './routes/_commonLayout/_authed'
import { Route as CommonLayoutPopularIndexRouteImport } from './routes/_commonLayout/popular/index'
import { Route as CommonLayoutExploreIndexRouteImport } from './routes/_commonLayout/explore/index'
import { Route as CommonLayoutAuthedPostsRouteImport } from './routes/_commonLayout/_authed/posts'
import { Route as CommonLayoutAuthedPostsIndexRouteImport } from './routes/_commonLayout/_authed/posts.index'
import { Route as CommonLayoutAuthedPostsPostIdRouteImport } from './routes/_commonLayout/_authed/posts.$postId'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const CommonLayoutRoute = CommonLayoutRouteImport.update({
  id: '/_commonLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const CommonLayoutIndexRoute = CommonLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CommonLayoutRoute,
} as any)
const CommonLayoutTestRoute = CommonLayoutTestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => CommonLayoutRoute,
} as any)
const CommonLayoutAuthedRoute = CommonLayoutAuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => CommonLayoutRoute,
} as any)
const CommonLayoutPopularIndexRoute =
  CommonLayoutPopularIndexRouteImport.update({
    id: '/popular/',
    path: '/popular/',
    getParentRoute: () => CommonLayoutRoute,
  } as any)
const CommonLayoutExploreIndexRoute =
  CommonLayoutExploreIndexRouteImport.update({
    id: '/explore/',
    path: '/explore/',
    getParentRoute: () => CommonLayoutRoute,
  } as any)
const CommonLayoutAuthedPostsRoute = CommonLayoutAuthedPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => CommonLayoutAuthedRoute,
} as any)
const CommonLayoutAuthedPostsIndexRoute =
  CommonLayoutAuthedPostsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => CommonLayoutAuthedPostsRoute,
  } as any)
const CommonLayoutAuthedPostsPostIdRoute =
  CommonLayoutAuthedPostsPostIdRouteImport.update({
    id: '/$postId',
    path: '/$postId',
    getParentRoute: () => CommonLayoutAuthedPostsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/test': typeof CommonLayoutTestRoute
  '/': typeof CommonLayoutIndexRoute
  '/posts': typeof CommonLayoutAuthedPostsRouteWithChildren
  '/explore': typeof CommonLayoutExploreIndexRoute
  '/popular': typeof CommonLayoutPopularIndexRoute
  '/posts/$postId': typeof CommonLayoutAuthedPostsPostIdRoute
  '/posts/': typeof CommonLayoutAuthedPostsIndexRoute
}
export interface FileRoutesByTo {
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/test': typeof CommonLayoutTestRoute
  '/': typeof CommonLayoutIndexRoute
  '/explore': typeof CommonLayoutExploreIndexRoute
  '/popular': typeof CommonLayoutPopularIndexRoute
  '/posts/$postId': typeof CommonLayoutAuthedPostsPostIdRoute
  '/posts': typeof CommonLayoutAuthedPostsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_commonLayout': typeof CommonLayoutRouteWithChildren
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/_commonLayout/_authed': typeof CommonLayoutAuthedRouteWithChildren
  '/_commonLayout/test': typeof CommonLayoutTestRoute
  '/_commonLayout/': typeof CommonLayoutIndexRoute
  '/_commonLayout/_authed/posts': typeof CommonLayoutAuthedPostsRouteWithChildren
  '/_commonLayout/explore/': typeof CommonLayoutExploreIndexRoute
  '/_commonLayout/popular/': typeof CommonLayoutPopularIndexRoute
  '/_commonLayout/_authed/posts/$postId': typeof CommonLayoutAuthedPostsPostIdRoute
  '/_commonLayout/_authed/posts/': typeof CommonLayoutAuthedPostsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/forgot-password'
    | '/login'
    | '/logout'
    | '/signup'
    | '/test'
    | '/'
    | '/posts'
    | '/explore'
    | '/popular'
    | '/posts/$postId'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/forgot-password'
    | '/login'
    | '/logout'
    | '/signup'
    | '/test'
    | '/'
    | '/explore'
    | '/popular'
    | '/posts/$postId'
    | '/posts'
  id:
    | '__root__'
    | '/_commonLayout'
    | '/forgot-password'
    | '/login'
    | '/logout'
    | '/signup'
    | '/_commonLayout/_authed'
    | '/_commonLayout/test'
    | '/_commonLayout/'
    | '/_commonLayout/_authed/posts'
    | '/_commonLayout/explore/'
    | '/_commonLayout/popular/'
    | '/_commonLayout/_authed/posts/$postId'
    | '/_commonLayout/_authed/posts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  CommonLayoutRoute: typeof CommonLayoutRouteWithChildren
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_commonLayout': {
      id: '/_commonLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof CommonLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_commonLayout/': {
      id: '/_commonLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof CommonLayoutIndexRouteImport
      parentRoute: typeof CommonLayoutRoute
    }
    '/_commonLayout/test': {
      id: '/_commonLayout/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof CommonLayoutTestRouteImport
      parentRoute: typeof CommonLayoutRoute
    }
    '/_commonLayout/_authed': {
      id: '/_commonLayout/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof CommonLayoutAuthedRouteImport
      parentRoute: typeof CommonLayoutRoute
    }
    '/_commonLayout/popular/': {
      id: '/_commonLayout/popular/'
      path: '/popular'
      fullPath: '/popular'
      preLoaderRoute: typeof CommonLayoutPopularIndexRouteImport
      parentRoute: typeof CommonLayoutRoute
    }
    '/_commonLayout/explore/': {
      id: '/_commonLayout/explore/'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof CommonLayoutExploreIndexRouteImport
      parentRoute: typeof CommonLayoutRoute
    }
    '/_commonLayout/_authed/posts': {
      id: '/_commonLayout/_authed/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof CommonLayoutAuthedPostsRouteImport
      parentRoute: typeof CommonLayoutAuthedRoute
    }
    '/_commonLayout/_authed/posts/': {
      id: '/_commonLayout/_authed/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof CommonLayoutAuthedPostsIndexRouteImport
      parentRoute: typeof CommonLayoutAuthedPostsRoute
    }
    '/_commonLayout/_authed/posts/$postId': {
      id: '/_commonLayout/_authed/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof CommonLayoutAuthedPostsPostIdRouteImport
      parentRoute: typeof CommonLayoutAuthedPostsRoute
    }
  }
}

interface CommonLayoutAuthedPostsRouteChildren {
  CommonLayoutAuthedPostsPostIdRoute: typeof CommonLayoutAuthedPostsPostIdRoute
  CommonLayoutAuthedPostsIndexRoute: typeof CommonLayoutAuthedPostsIndexRoute
}

const CommonLayoutAuthedPostsRouteChildren: CommonLayoutAuthedPostsRouteChildren =
  {
    CommonLayoutAuthedPostsPostIdRoute: CommonLayoutAuthedPostsPostIdRoute,
    CommonLayoutAuthedPostsIndexRoute: CommonLayoutAuthedPostsIndexRoute,
  }

const CommonLayoutAuthedPostsRouteWithChildren =
  CommonLayoutAuthedPostsRoute._addFileChildren(
    CommonLayoutAuthedPostsRouteChildren,
  )

interface CommonLayoutAuthedRouteChildren {
  CommonLayoutAuthedPostsRoute: typeof CommonLayoutAuthedPostsRouteWithChildren
}

const CommonLayoutAuthedRouteChildren: CommonLayoutAuthedRouteChildren = {
  CommonLayoutAuthedPostsRoute: CommonLayoutAuthedPostsRouteWithChildren,
}

const CommonLayoutAuthedRouteWithChildren =
  CommonLayoutAuthedRoute._addFileChildren(CommonLayoutAuthedRouteChildren)

interface CommonLayoutRouteChildren {
  CommonLayoutAuthedRoute: typeof CommonLayoutAuthedRouteWithChildren
  CommonLayoutTestRoute: typeof CommonLayoutTestRoute
  CommonLayoutIndexRoute: typeof CommonLayoutIndexRoute
  CommonLayoutExploreIndexRoute: typeof CommonLayoutExploreIndexRoute
  CommonLayoutPopularIndexRoute: typeof CommonLayoutPopularIndexRoute
}

const CommonLayoutRouteChildren: CommonLayoutRouteChildren = {
  CommonLayoutAuthedRoute: CommonLayoutAuthedRouteWithChildren,
  CommonLayoutTestRoute: CommonLayoutTestRoute,
  CommonLayoutIndexRoute: CommonLayoutIndexRoute,
  CommonLayoutExploreIndexRoute: CommonLayoutExploreIndexRoute,
  CommonLayoutPopularIndexRoute: CommonLayoutPopularIndexRoute,
}

const CommonLayoutRouteWithChildren = CommonLayoutRoute._addFileChildren(
  CommonLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  CommonLayoutRoute: CommonLayoutRouteWithChildren,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
